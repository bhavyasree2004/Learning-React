{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\divya\\\\OneDrive\\\\Desktop\\\\Starting with React\\\\IPOD\\\\scaffold\\\\src\\\\App.js\";\nimport React from \"react\";\nimport \"./App.css\";\nimport Screen from \"./components/Screen\";\nimport Controls from \"./components/Controls\";\nimport Music from \"./components/Music\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nclass App extends React.Component {\n  constructor() {\n    super();\n    // Handle the rotate event fired from the control component\n    this.handleRotation = direction => {\n      const {\n        selectedItemIndex,\n        menuItems,\n        activeScreen,\n        selectedMusicItemIndex,\n        musicMenuItems,\n        musicDisplay\n      } = this.state;\n      if (activeScreen === \"menu\") {\n        let newIndex = selectedItemIndex;\n        if (direction == \"clockwise\") {\n          newIndex = (selectedItemIndex + 1) % menuItems.length;\n        } else {\n          newIndex = (selectedItemIndex - 1 + menuItems.length) % menuItems.length;\n        }\n        this.setState({\n          selectedItemIndex: newIndex\n        });\n      } else if (activeScreen === \"music\" && musicDisplay.musicMenu) {\n        let newMusicIndex = selectedMusicItemIndex;\n        if (direction === \"clockwise\") {\n          newMusicIndex = (selectedMusicItemIndex + 1) % musicMenuItems.length;\n        } else {\n          newMusicIndex = (selectedMusicItemIndex - 1) % musicMenuItems.length;\n        }\n        this.setState({\n          selectedMusicItemIndex: newMusicIndex\n        });\n      }\n    };\n    // If ok button is clicked,  open the selected component\n    this.handleOkay = () => {\n      const {\n        selectedItemIndex,\n        menuItems,\n        activeScreen,\n        musicDisplay,\n        selectedMusicItemIndex,\n        musicMenuItems\n      } = this.state;\n      if (activeScreen === \"menu\") {\n        const selectedMenuItem = menuItems[selectedItemIndex];\n        if (selectedMenuItem === \"music\") {\n          this.setState({\n            activeScreen: \"music\",\n            musicDisplay: {\n              musicMenu: true,\n              allSongs: false,\n              artists: false,\n              albums: false\n            },\n            selectedItemIndex: 0\n          });\n        } else {\n          this.setState({\n            activeScreen: selectedMenuItem\n          });\n        }\n      } else if (activeScreen === \"music\" && musicDisplay.musicMenu) {\n        const selectedMusicMenuItem = musicMenuItems[selectedMusicItemIndex];\n        let newMusicDisplay = {\n          musicMenu: false,\n          allSongs: false,\n          artists: false,\n          albums: false\n        };\n        switch (selectedMusicMenuItem) {\n          case \"All Songs\":\n            newMusicDisplay.allSongs = true;\n            break;\n          case \"Artists\":\n            newMusicDisplay.artists = true;\n            break;\n          case \"Albums\":\n            newMusicDisplay.albums = true;\n            break;\n        }\n        this.setState({\n          musicDisplay: newMusicDisplay\n        });\n      }\n    };\n    // If menu button is clicked, go back to the menu screen\n    this.handleMenuClick = () => {\n      const {\n        activeScreen,\n        musicDisplay\n      } = this.state;\n      if (activeScreen === \"music\" && !musicDisplay.musicMenu) {\n        this.setState({\n          musicDisplay: {\n            musicMenu: true,\n            allSongs: false,\n            artists: false,\n            albums: false\n          },\n          selectedMusicItemIndex: 0\n        });\n      } else {}\n    };\n    this.state = {\n      selectedItemIndex: 0,\n      menuItems: [\"coverflow\", \"music\", \"games\", \"settings\"],\n      activeScreen: \"menu\",\n      musicDisplay: {\n        musicMenu: true,\n        allSongs: false,\n        artists: false,\n        albums: false\n      },\n      selectedMusicItemIndex: 0,\n      musicMenuItems: [\"All Songs\", \"Artists\", \"Albums\"]\n    };\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"iPod-app\",\n        children: [/*#__PURE__*/_jsxDEV(Screen, {\n          selectedItemIndex: this.state.selectedItemIndex,\n          menuItems: this.state.menuItems,\n          activeScreen: this.state.activeScreen\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Controls, {\n          onRotate: this.handleRotation,\n          onOkay: this.handleOkay,\n          onMenu: this.handleMenuClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  }\n}\nexport default App;","map":{"version":3,"names":["React","Screen","Controls","Music","jsxDEV","_jsxDEV","Fragment","_Fragment","App","Component","constructor","handleRotation","direction","selectedItemIndex","menuItems","activeScreen","selectedMusicItemIndex","musicMenuItems","musicDisplay","state","newIndex","length","setState","musicMenu","newMusicIndex","handleOkay","selectedMenuItem","allSongs","artists","albums","selectedMusicMenuItem","newMusicDisplay","handleMenuClick","render","children","id","fileName","_jsxFileName","lineNumber","columnNumber","onRotate","onOkay","onMenu"],"sources":["C:/Users/divya/OneDrive/Desktop/Starting with React/IPOD/scaffold/src/App.js"],"sourcesContent":["import React from \"react\";\r\nimport \"./App.css\";\r\nimport Screen from \"./components/Screen\";\r\nimport Controls from \"./components/Controls\";\r\nimport Music from \"./components/Music\";\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      selectedItemIndex: 0,\r\n      menuItems: [\"coverflow\", \"music\", \"games\", \"settings\"],\r\n      activeScreen: \"menu\",\r\n      musicDisplay: {\r\n        musicMenu: true,\r\n        allSongs: false,\r\n        artists: false,\r\n        albums: false,\r\n      },\r\n      selectedMusicItemIndex: 0,\r\n      musicMenuItems: [\"All Songs\", \"Artists\", \"Albums\"],\r\n    };\r\n  }\r\n  // Handle the rotate event fired from the control component\r\n  handleRotation = (direction) => {\r\n    const {\r\n      selectedItemIndex,\r\n      menuItems,\r\n      activeScreen,\r\n      selectedMusicItemIndex,\r\n      musicMenuItems,\r\n      musicDisplay,\r\n    } = this.state;\r\n    if (activeScreen === \"menu\") {\r\n      let newIndex = selectedItemIndex;\r\n      if (direction == \"clockwise\") {\r\n        newIndex = (selectedItemIndex + 1) % menuItems.length;\r\n      } else {\r\n        newIndex =\r\n          (selectedItemIndex - 1 + menuItems.length) % menuItems.length;\r\n      }\r\n      this.setState({ selectedItemIndex: newIndex });\r\n    } else if (activeScreen === \"music\" && musicDisplay.musicMenu) {\r\n      let newMusicIndex = selectedMusicItemIndex;\r\n      if (direction === \"clockwise\") {\r\n        newMusicIndex = (selectedMusicItemIndex + 1) % musicMenuItems.length;\r\n      } else {\r\n        newMusicIndex = (selectedMusicItemIndex - 1) % musicMenuItems.length;\r\n      }\r\n      this.setState({ selectedMusicItemIndex: newMusicIndex });\r\n    }\r\n  };\r\n\r\n  // If ok button is clicked,  open the selected component\r\n  handleOkay = () => {\r\n    const {\r\n      selectedItemIndex,\r\n      menuItems,\r\n      activeScreen,\r\n      musicDisplay,\r\n      selectedMusicItemIndex,\r\n      musicMenuItems,\r\n    } = this.state;\r\n    if (activeScreen === \"menu\") {\r\n      const selectedMenuItem = menuItems[selectedItemIndex];\r\n      if (selectedMenuItem === \"music\") {\r\n        this.setState({\r\n          activeScreen: \"music\",\r\n          musicDisplay: {\r\n            musicMenu: true,\r\n            allSongs: false,\r\n            artists: false,\r\n            albums: false,\r\n          },\r\n          selectedItemIndex: 0,\r\n        });\r\n      } else {\r\n        this.setState({ activeScreen: selectedMenuItem });\r\n      }\r\n    } else if (activeScreen === \"music\" && musicDisplay.musicMenu) {\r\n      const selectedMusicMenuItem = musicMenuItems[selectedMusicItemIndex];\r\n      let newMusicDisplay = {\r\n        musicMenu: false,\r\n        allSongs: false,\r\n        artists: false,\r\n        albums: false,\r\n      };\r\n      switch (selectedMusicMenuItem) {\r\n        case \"All Songs\":\r\n          newMusicDisplay.allSongs = true;\r\n          break;\r\n        case \"Artists\":\r\n          newMusicDisplay.artists = true;\r\n          break;\r\n        case \"Albums\":\r\n          newMusicDisplay.albums = true;\r\n          break;\r\n      }\r\n      this.setState({ musicDisplay: newMusicDisplay });\r\n    }\r\n  };\r\n\r\n  // If menu button is clicked, go back to the menu screen\r\n  handleMenuClick = () => {\r\n   const {activeScreen,musicDisplay}=this.state;\r\n   if(activeScreen===\"music\"&&!musicDisplay.musicMenu){\r\n    this.setState({\r\n      musicDisplay:{musicMenu:true,allSongs:false,artists:false,albums:false},\r\n      selectedMusicItemIndex:0,\r\n    });\r\n   }\r\n   else{\r\n    \r\n   }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <div id=\"iPod-app\">\r\n          <Screen\r\n            selectedItemIndex={this.state.selectedItemIndex}\r\n            menuItems={this.state.menuItems}\r\n            activeScreen={this.state.activeScreen}\r\n          />\r\n          <Controls\r\n            onRotate={this.handleRotation}\r\n            onOkay={this.handleOkay}\r\n            onMenu={this.handleMenuClick}\r\n          />\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,WAAW;AAClB,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,OAAOC,KAAK,MAAM,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEvC,MAAMC,GAAG,SAASR,KAAK,CAACS,SAAS,CAAC;EAChCC,WAAWA,CAAA,EAAG;IACZ,KAAK,CAAC,CAAC;IAeT;IAAA,KACAC,cAAc,GAAIC,SAAS,IAAK;MAC9B,MAAM;QACJC,iBAAiB;QACjBC,SAAS;QACTC,YAAY;QACZC,sBAAsB;QACtBC,cAAc;QACdC;MACF,CAAC,GAAG,IAAI,CAACC,KAAK;MACd,IAAIJ,YAAY,KAAK,MAAM,EAAE;QAC3B,IAAIK,QAAQ,GAAGP,iBAAiB;QAChC,IAAID,SAAS,IAAI,WAAW,EAAE;UAC5BQ,QAAQ,GAAG,CAACP,iBAAiB,GAAG,CAAC,IAAIC,SAAS,CAACO,MAAM;QACvD,CAAC,MAAM;UACLD,QAAQ,GACN,CAACP,iBAAiB,GAAG,CAAC,GAAGC,SAAS,CAACO,MAAM,IAAIP,SAAS,CAACO,MAAM;QACjE;QACA,IAAI,CAACC,QAAQ,CAAC;UAAET,iBAAiB,EAAEO;QAAS,CAAC,CAAC;MAChD,CAAC,MAAM,IAAIL,YAAY,KAAK,OAAO,IAAIG,YAAY,CAACK,SAAS,EAAE;QAC7D,IAAIC,aAAa,GAAGR,sBAAsB;QAC1C,IAAIJ,SAAS,KAAK,WAAW,EAAE;UAC7BY,aAAa,GAAG,CAACR,sBAAsB,GAAG,CAAC,IAAIC,cAAc,CAACI,MAAM;QACtE,CAAC,MAAM;UACLG,aAAa,GAAG,CAACR,sBAAsB,GAAG,CAAC,IAAIC,cAAc,CAACI,MAAM;QACtE;QACA,IAAI,CAACC,QAAQ,CAAC;UAAEN,sBAAsB,EAAEQ;QAAc,CAAC,CAAC;MAC1D;IACF,CAAC;IAED;IAAA,KACAC,UAAU,GAAG,MAAM;MACjB,MAAM;QACJZ,iBAAiB;QACjBC,SAAS;QACTC,YAAY;QACZG,YAAY;QACZF,sBAAsB;QACtBC;MACF,CAAC,GAAG,IAAI,CAACE,KAAK;MACd,IAAIJ,YAAY,KAAK,MAAM,EAAE;QAC3B,MAAMW,gBAAgB,GAAGZ,SAAS,CAACD,iBAAiB,CAAC;QACrD,IAAIa,gBAAgB,KAAK,OAAO,EAAE;UAChC,IAAI,CAACJ,QAAQ,CAAC;YACZP,YAAY,EAAE,OAAO;YACrBG,YAAY,EAAE;cACZK,SAAS,EAAE,IAAI;cACfI,QAAQ,EAAE,KAAK;cACfC,OAAO,EAAE,KAAK;cACdC,MAAM,EAAE;YACV,CAAC;YACDhB,iBAAiB,EAAE;UACrB,CAAC,CAAC;QACJ,CAAC,MAAM;UACL,IAAI,CAACS,QAAQ,CAAC;YAAEP,YAAY,EAAEW;UAAiB,CAAC,CAAC;QACnD;MACF,CAAC,MAAM,IAAIX,YAAY,KAAK,OAAO,IAAIG,YAAY,CAACK,SAAS,EAAE;QAC7D,MAAMO,qBAAqB,GAAGb,cAAc,CAACD,sBAAsB,CAAC;QACpE,IAAIe,eAAe,GAAG;UACpBR,SAAS,EAAE,KAAK;UAChBI,QAAQ,EAAE,KAAK;UACfC,OAAO,EAAE,KAAK;UACdC,MAAM,EAAE;QACV,CAAC;QACD,QAAQC,qBAAqB;UAC3B,KAAK,WAAW;YACdC,eAAe,CAACJ,QAAQ,GAAG,IAAI;YAC/B;UACF,KAAK,SAAS;YACZI,eAAe,CAACH,OAAO,GAAG,IAAI;YAC9B;UACF,KAAK,QAAQ;YACXG,eAAe,CAACF,MAAM,GAAG,IAAI;YAC7B;QACJ;QACA,IAAI,CAACP,QAAQ,CAAC;UAAEJ,YAAY,EAAEa;QAAgB,CAAC,CAAC;MAClD;IACF,CAAC;IAED;IAAA,KACAC,eAAe,GAAG,MAAM;MACvB,MAAM;QAACjB,YAAY;QAACG;MAAY,CAAC,GAAC,IAAI,CAACC,KAAK;MAC5C,IAAGJ,YAAY,KAAG,OAAO,IAAE,CAACG,YAAY,CAACK,SAAS,EAAC;QAClD,IAAI,CAACD,QAAQ,CAAC;UACZJ,YAAY,EAAC;YAACK,SAAS,EAAC,IAAI;YAACI,QAAQ,EAAC,KAAK;YAACC,OAAO,EAAC,KAAK;YAACC,MAAM,EAAC;UAAK,CAAC;UACvEb,sBAAsB,EAAC;QACzB,CAAC,CAAC;MACH,CAAC,MACG,CAEJ;IACD,CAAC;IAzGC,IAAI,CAACG,KAAK,GAAG;MACXN,iBAAiB,EAAE,CAAC;MACpBC,SAAS,EAAE,CAAC,WAAW,EAAE,OAAO,EAAE,OAAO,EAAE,UAAU,CAAC;MACtDC,YAAY,EAAE,MAAM;MACpBG,YAAY,EAAE;QACZK,SAAS,EAAE,IAAI;QACfI,QAAQ,EAAE,KAAK;QACfC,OAAO,EAAE,KAAK;QACdC,MAAM,EAAE;MACV,CAAC;MACDb,sBAAsB,EAAE,CAAC;MACzBC,cAAc,EAAE,CAAC,WAAW,EAAE,SAAS,EAAE,QAAQ;IACnD,CAAC;EACH;EA8FAgB,MAAMA,CAAA,EAAG;IACP,oBACE5B,OAAA,CAAAE,SAAA;MAAA2B,QAAA,eACE7B,OAAA;QAAK8B,EAAE,EAAC,UAAU;QAAAD,QAAA,gBAChB7B,OAAA,CAACJ,MAAM;UACLY,iBAAiB,EAAE,IAAI,CAACM,KAAK,CAACN,iBAAkB;UAChDC,SAAS,EAAE,IAAI,CAACK,KAAK,CAACL,SAAU;UAChCC,YAAY,EAAE,IAAI,CAACI,KAAK,CAACJ;QAAa;UAAAqB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACvC,CAAC,eACFlC,OAAA,CAACH,QAAQ;UACPsC,QAAQ,EAAE,IAAI,CAAC7B,cAAe;UAC9B8B,MAAM,EAAE,IAAI,CAAChB,UAAW;UACxBiB,MAAM,EAAE,IAAI,CAACV;QAAgB;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC9B,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC;IAAC,gBACN,CAAC;EAEP;AACF;AAEA,eAAe/B,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}